# импортируем пространство имен, т.к. set
# не определен в пространстве имен по-умолчанию
require 'set'

#метод, который принимает строку
def alphabet(string)
  # инициализируем set
  set = Set.new
  # итерация по каждому символу в строке
  string.each_char do |letter|
    # только если символ между a и z (игнорируем пробелы и все остальное)
    #if letter >= 'a' && letter <= 'z'
    if ('a'..'z').include?(letter)
      # добавляем в set
      set.add(letter)
    end
  end
  # результат выражения true, если есть все английские буквы в наборе
  set.size == 26
end

# выведет true, т.к. в этом предложении используются все буквы англ. алфавита
puts alphabet('the quick brown fox jumps over the lazy dog dog')

=begin
К слову, одна из ошибок, которую можно было бы сделать в этом задании - разбить строку
на символы методом split:
> "quick brown fox jumps over the lazy dog".split('')
=> ["q", "u", "i", "c", "k", " ", "b", "r", "o", "w", "n", " ", "f", "o", "x", " ", "j", "u", "m", "p", "s", " ", "o",
"v", "e", "r", " ", "t", "h", "e", " ", "l", "a", "z", "y", " ", "d", "o", "g"]
В этом случае произошло бы выделение дополнительной памяти. Представьте, что строка
имеет размер в несколько гигабайт. Зачем формировать массив и расходовать память,
когда можно просто воспользоваться итерацией по символам средствами класса String?
Другая возможная ошибка в этом упражнении - итерация строки до конца. Если строка
довольно большая, а распределение символов равномерно, то вероятность того, что все
символы встретятся где-то вначале очень высока. Поэтому проверка на размер HashSet
довольно полезна и в теории должна сэкономить вычислительные ресурсы.

Задание: в программе выше допущена ошибка, которая приведет к большим расходам
вычислительных ресурсов на больших строках. Сможете ли вы ее увидеть?
Задание: после того, как вы прочитали эту главу, попробуйте потренироваться и написать
эту программу самостоятельно, не подсматривая в книгу.

=end